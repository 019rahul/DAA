
===========================================================================================

Aim: Write a Program to implement insertion sort and find the running time (pra1)
===========================================================================================
import random
import time
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
def generate_random_list(size):
    return [random.randint(1, 100) for _ in range(size)]
def main():
    # Adjust this value to change the size of the list to be sorted
    list_size = 100
    random_list = generate_random_list(list_size)
    start_time = time.time()
    insertion_sort(random_list)
    end_time = time.time()

    elapsed_time = end_time - start_time

    print(f"Sorted list: {random_list}")
    print(f"Insertion sort took {elapsed_time:.6f} seconds for a list of size {list_size}.")
if __name__ == "__main__":
    main()


=================================================================================================================

  Practical-03
Aim:Write the Program to Strassen’s algorithm for matix multiplication and analyze its complexity.
===================================================================================================================

def strassen_matrix_multiply(A, B):
    n = len(A)
    # Base case: if the matrix size is 1x1, return the product
    if n == 1:
        return [[A[0][0] * B[0][0]]]

    # Divide the matrices into four submatrices
    mid = n // 2
    A11 = [row[:mid] for row in A[:mid]]
    A12 = [row[mid:] for row in A[:mid]]
    A21 = [row[:mid] for row in A[mid:]]
    A22 = [row[mid:] for row in A[mid:]]
    B11 = [row[:mid] for row in B[:mid]]
    B12 = [row[mid:] for row in B[:mid]]
    B21 = [row[:mid] for row in B[mid:]]
    B22 = [row[mid:] for row in B[mid:]]

    # Recursive matrix multiplication using Strassen's algorithm
    P1 = strassen_matrix_multiply(A11, matrix_subtract(B12, B22))
    P2 = strassen_matrix_multiply(matrix_add(A11, A12), B22)
    P3 = strassen_matrix_multiply(matrix_add(A21, A22), B11)
    P4 = strassen_matrix_multiply(A22, matrix_subtract(B21, B11))
    P5 = strassen_matrix_multiply(matrix_add(A11, A22), matrix_add(B11, B22))
    P6 = strassen_matrix_multiply(matrix_subtract(A12, A22), matrix_add(B21, B22))
    P7 = strassen_matrix_multiply(matrix_subtract(A11, A21), matrix_add(B11, B12))

    # Calculate the resulting submatrices
    C11 = matrix_add(matrix_subtract(matrix_add(P5, P4), P2), P6)
    C12 = matrix_add(P1, P2)
    C21 = matrix_add(P3, P4)
    C22 = matrix_subtract(matrix_subtract(matrix_add(P5, P1), P3), P7)

    # Combine the submatrices to form the result matrix
    result = [[0] * n for _ in range(n)]
    for i in range(mid):
        for j in range(mid):
            result[i][j] = C11[i][j]
            result[i][j + mid] = C12[i][j]
            result[i + mid][j] = C21[i][j]
            result[i + mid][j + mid] = C22[i][j]
    return result
def matrix_add(A, B):
    return [[A[i][j] + B[i][j] for j in range(len(A[0]))] for i in range(len(A))]
def matrix_subtract(A, B):
    return [[A[i][j] - B[i][j] for j in range(len(A[0]))] for i in range(len(A))]

if __name__ == "__main__":
    A = [[1, 2, 3, 4],
         [5, 6, 7, 8],
         [9, 10, 11, 12],
         [13, 14, 15, 16]]

    B = [[17, 18, 19, 20],
         [21, 22, 23, 24],
         [25, 26, 27, 28],
         [29, 30, 31, 32]]
    result = strassen_matrix_multiply(A, B)
    print("Matrix A:")
    for row in A:
        print(row)
    print("Matrix B:")
    for row in B:
        print(row)
    print("Result of matrix multiplication (Strassen's Algorithm):")
    for row in result:
        print(row)


 Practical:04
Aim: Implement hiring problem and analyze its complexity.

import random

def hiring_problem(candidates):
    best_candidate = candidates[0]
    n = len(candidates)
    for i in range(1, n):
        if candidates[i] > best_candidate:
            best_candidate = candidates[i]
    return best_candidate
def main():
    num_candidates = 100  # Change the number of candidates
    candidates = [random.uniform(0, 1) for _ in range(num_candidates)]
    best = hiring_problem(candidates)
    print("Best candidate:", best)
if __name__ == "__main__":
    main()


================================================================================================
Practical:05
Aim: Write a program to implement Longest Common Subsequent(LCS) algorithm.
================================================================================================
def longest_common_subsequence(str1, str2):
    m = len(str1)
    n = len(str2)
    # Initialize a table to store the lengths of LCS for subproblems
    lcs_table = [[0] * (n + 1) for _ in range(m + 1)]
    # Building the LCS table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                lcs_table[i][j] = lcs_table[i - 1][j - 1] + 1
            else:
               lcs_table[i][j] = max(lcs_table[i - 1][j], lcs_table[i][j - 1])
    # Backtracking to find the longest common subsequence
    lcs = []
    i, j = m, n
    while i > 0 and j > 0:
        if str1[i - 1] == str2[j - 1]:
            lcs.append(str1[i - 1])
            i -= 1
            j -= 1
        elif lcs_table[i - 1][j] > lcs_table[i][j - 1]:
            i -= 1
        else:
            j -= 1
    return ''.join(lcs[::-1])  # Reverse the list to get the LCS in correct order
# Example usage:
string1 = "ABCDGH"
string2 = "AEDFHR"
result = longest_common_subsequence(string1, string2)
print("Longest Common Subsequence:", result)

====================================================================================================
Practical:06
Aim: Write a Program to implement Huffman’s code Algorithm.
=====================================================================================================
class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None
def build_huffman_tree(freq_dict):
    nodes = [Node(char, freq) for char, freq in freq_dict.items()]
    while len(nodes) > 1:
        nodes = sorted(nodes, key=lambda x: x.freq)
        left = nodes.pop(0)
        right = nodes.pop(0)
        merge = Node(None, left.freq + right.freq)
        merge.left = left
        merge.right = right
        nodes.append(merge)
    return nodes[0]
def generate_huffman_codes(root, current_code, huffman_codes):
    if root is None:
        return
    if root.char is not None:
        huffman_codes[root.char] = current_code
        return
    generate_huffman_codes(root.left, current_code + "0", huffman_codes)
    generate_huffman_codes(root.right, current_code + "1", huffman_codes)
def huffman_encoding(text):
    freq_dict = {}
    for char in text:
        if char in freq_dict:
            freq_dict[char] += 1
        else:
            freq_dict[char] = 1
    huffman_tree = build_huffman_tree(freq_dict)
    huffman_codes = {}
    generate_huffman_codes(huffman_tree, "", huffman_codes)
    encoded_text = "".join(huffman_codes[char] for char in text)
    return encoded_text, huffman_tree
def huffman_decoding(encoded_text, huffman_tree):
    decoded_text = ""
    current = huffman_tree
    for bit in encoded_text:
        if bit == '0':
            current = current.left
        else:
            current = current.right
        if current.char is not None:
            decoded_text += current.char
            current = huffman_tree
    return decoded_text
# Example usage:
text = "Huffman coding is a data compression algorithm."
encoded_text, tree = huffman_encoding(text)
print("Original text:", text)
print("Encoded text:", encoded_text)
decoded_text = huffman_decoding(encoded_text, tree)
print("Decoded text:", decoded_text)


=====================================================================================================
Practical:07
Aim: Write a Program to implement the Kruskal’s Algorithm.
=====================================================================================================
class DisjointSet:
    def __init__(self, vertices):
        self.parent = {vertex: vertex for vertex in vertices}
        self.rank = {vertex: 0 for vertex in vertices}
    def find(self, vertex):
        if self.parent[vertex] != vertex:
            self.parent[vertex] = self.find(self.parent[vertex])
        return self.parent[vertex]
    def union(self, vertex1, vertex2):
        root1 = self.find(vertex1)
        root2 = self.find(vertex2)
        if root1 != root2:
            if self.rank[root1] > self.rank[root2]:
                self.parent[root2] = root1
            else:
                self.parent[root1] = root2
                if self.rank[root1] == self.rank[root2]:
                    self.rank[root2] += 1
def kruskal(graph):
    vertices = list(graph.keys())
    disjoint_set = DisjointSet(vertices)
    mst = []

    edges = []
    for vertex in graph:
        for neighbor, weight in graph[vertex]:
            edges.append((weight, vertex, neighbor))
    edges.sort()  # Sort edges based on their weights
    for edge in edges:
        weight, vertex1, vertex2 = edge
        if disjoint_set.find(vertex1) != disjoint_set.find(vertex2):
            disjoint_set.union(vertex1, vertex2)
            mst.append((vertex1, vertex2, weight))
    return mst
# Example usage:
graph = {
    'A': [('B', 3), ('C', 1)],
    'B': [('A', 3), ('C', 7), ('D', 5)],
    'C': [('A', 1), ('B', 7), ('D', 2)],
    'D': [('B', 5), ('C', 2)]
}
minimum_spanning_tree = kruskal(graph)
print("Minimum Spanning Tree (Kruskal's Algorithm):")
for edge in minimum_spanning_tree:
    print(f"Edge: {edge[0]} - {edge[1]}, Weight: {edge[2]}")


=============================================================================================================
Practical:08
Aim: Write the Program to implement Dijkshtra algorithm.
==============================================================================================================

def extract_min(distances, visited):
    min_distance = float('inf')
    min_node = None
    for node in distances:
        if not visited[node] and distances[node] < min_distance:
            min_distance = distances[node]
            min_node = node
    return min_node
def dijkstra(graph, source):
    distances = {node: float('inf') for node in graph}
    distances[source] = 0
    visited = {node: False for node in graph}
    for _ in range(len(graph)):
        current_node = extract_min(distances, visited)
        visited[current_node] = True

        for neighbor, weight in graph[current_node].items():
            if not visited[neighbor]:
                distances[neighbor] = min(distances[neighbor], distances[current_node] + weight)
    return distances
# Example usage:
graph = {
    'A': {'B': 3, 'C': 1},
    'B': {'A': 3, 'C': 7, 'D': 5},
    'C': {'A': 1, 'B': 7, 'D': 2},
    'D': {'B': 5, 'C': 2}
}
source_node = 'A'
shortest_distances = dijkstra(graph, source_node)
print(f"Shortest distances from node {source_node}:")
for node, distance in shortest_distances.items():
    print(f"Node {node}: Shortest distance = {distance}")

====================================================================================================================






